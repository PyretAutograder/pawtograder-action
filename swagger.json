{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"SubmissionResponse": {
				"properties": {
					"grader_sha": {
						"type": "string"
					},
					"grader_url": {
						"type": "string"
					}
				},
				"required": [
					"grader_sha",
					"grader_url"
				],
				"type": "object"
			},
			"RegressionTestRunResponse": {
				"properties": {
					"regression_test_sha": {
						"type": "string"
					},
					"regression_test_url": {
						"type": "string"
					}
				},
				"required": [
					"regression_test_sha",
					"regression_test_url"
				],
				"type": "object"
			},
			"GradeResponse": {
				"properties": {
					"details_url": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"is_ok": {
						"type": "boolean"
					}
				},
				"required": [
					"details_url",
					"message",
					"is_ok"
				],
				"type": "object"
			},
			"OutputFormat": {
				"type": "string",
				"enum": [
					"text",
					"markdown",
					"ansi"
				]
			},
			"AutograderFeedback": {
				"properties": {
					"tests": {
						"items": {
							"properties": {
								"extra_data": {
									"properties": {},
									"additionalProperties": {
										"type": "string"
									},
									"type": "object"
								},
								"part": {
									"type": "string"
								},
								"output_format": {
									"$ref": "#/components/schemas/OutputFormat"
								},
								"output": {
									"type": "string"
								},
								"name_format": {
									"$ref": "#/components/schemas/OutputFormat"
								},
								"name": {
									"type": "string"
								},
								"max_score": {
									"type": "number",
									"format": "double"
								},
								"score": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"output",
								"name"
							],
							"type": "object"
						},
						"type": "array"
					},
					"lint": {
						"properties": {
							"output_format": {
								"$ref": "#/components/schemas/OutputFormat"
							},
							"output": {
								"type": "string"
							},
							"status": {
								"type": "string",
								"enum": [
									"pass",
									"fail"
								]
							}
						},
						"required": [
							"output",
							"status"
						],
						"type": "object"
					},
					"output": {
						"properties": {
							"visible": {
								"properties": {
									"output_format": {
										"$ref": "#/components/schemas/OutputFormat"
									},
									"output": {
										"type": "string"
									}
								},
								"required": [
									"output"
								],
								"type": "object"
							},
							"hidden": {
								"properties": {
									"output_format": {
										"$ref": "#/components/schemas/OutputFormat"
									},
									"output": {
										"type": "string"
									}
								},
								"required": [
									"output"
								],
								"type": "object"
							},
							"after_due_date": {
								"properties": {
									"output_format": {
										"$ref": "#/components/schemas/OutputFormat"
									},
									"output": {
										"type": "string"
									}
								},
								"required": [
									"output"
								],
								"type": "object"
							},
							"after_published": {
								"properties": {
									"output_format": {
										"$ref": "#/components/schemas/OutputFormat"
									},
									"output": {
										"type": "string"
									}
								},
								"required": [
									"output"
								],
								"type": "object"
							}
						},
						"type": "object"
					},
					"max_score": {
						"type": "number",
						"format": "double"
					},
					"score": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"tests",
					"lint",
					"output"
				],
				"type": "object"
			},
			"GradingScriptResult": {
				"properties": {
					"regression_test_repo": {
						"type": "string"
					},
					"grader_sha": {
						"type": "string"
					},
					"feedback": {
						"$ref": "#/components/schemas/AutograderFeedback"
					},
					"execution_time": {
						"type": "number",
						"format": "double"
					},
					"output": {
						"type": "string"
					},
					"ret_code": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"grader_sha",
					"feedback",
					"execution_time",
					"output",
					"ret_code"
				],
				"type": "object"
			},
			"Calendar": {
				"properties": {
					"ics": {
						"type": "string"
					}
				},
				"required": [
					"ics"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Grades": {
				"properties": {
					"html_url": {
						"type": "string"
					},
					"current_grade": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"current_score": {
						"type": "number",
						"format": "double"
					},
					"final_grade": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"final_score": {
						"type": "number",
						"format": "double"
					},
					"unposted_current_score": {
						"type": "number",
						"format": "double"
					},
					"unposted_current_grade": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"unposted_final_score": {
						"type": "number",
						"format": "double"
					},
					"unposted_final_grade": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"html_url",
					"current_grade",
					"current_score",
					"final_grade",
					"final_score",
					"unposted_current_score",
					"unposted_current_grade",
					"unposted_final_score",
					"unposted_final_grade"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"sortable_name": {
						"type": "string"
					},
					"short_name": {
						"type": "string"
					},
					"sis_user_id": {
						"type": "string"
					},
					"integration_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"login_id": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"created_at",
					"sortable_name",
					"short_name",
					"sis_user_id",
					"integration_id",
					"login_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Enrollment": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"user_id": {
						"type": "number",
						"format": "double"
					},
					"course_id": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "string"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time"
					},
					"associated_user_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"start_at": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"end_at": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"course_section_id": {
						"type": "number",
						"format": "double"
					},
					"root_account_id": {
						"type": "number",
						"format": "double"
					},
					"limit_privileges_to_course_section": {
						"type": "boolean"
					},
					"enrollment_state": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"role_id": {
						"type": "number",
						"format": "double"
					},
					"last_activity_at": {
						"type": "string",
						"format": "date-time"
					},
					"last_attended_at": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"total_activity_time": {
						"type": "number",
						"format": "double"
					},
					"grades": {
						"$ref": "#/components/schemas/Grades"
					},
					"sis_account_id": {
						"type": "string"
					},
					"sis_course_id": {
						"type": "string"
					},
					"course_integration_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"sis_section_id": {
						"type": "string"
					},
					"section_integration_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"sis_user_id": {
						"type": "string"
					},
					"html_url": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"id",
					"user_id",
					"course_id",
					"type",
					"created_at",
					"updated_at",
					"associated_user_id",
					"start_at",
					"end_at",
					"course_section_id",
					"root_account_id",
					"limit_privileges_to_course_section",
					"enrollment_state",
					"role",
					"role_id",
					"last_activity_at",
					"last_attended_at",
					"total_activity_time",
					"grades",
					"sis_account_id",
					"sis_course_id",
					"course_integration_id",
					"sis_section_id",
					"section_integration_id",
					"sis_user_id",
					"html_url",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Course": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"account_id": {
						"type": "number",
						"format": "double"
					},
					"uuid": {
						"type": "string"
					},
					"start_at": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"grading_standard_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"is_public": {
						"type": "boolean"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"course_code": {
						"type": "string"
					},
					"default_view": {
						"type": "string"
					},
					"root_account_id": {
						"type": "number",
						"format": "double"
					},
					"enrollment_term_id": {
						"type": "number",
						"format": "double"
					},
					"license": {
						"type": "string"
					},
					"grade_passback_setting": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"end_at": {
						"type": "string",
						"format": "date-time"
					},
					"public_syllabus": {
						"type": "boolean"
					},
					"public_syllabus_to_auth": {
						"type": "boolean"
					},
					"storage_quota_mb": {
						"type": "number",
						"format": "double"
					},
					"is_public_to_auth_users": {
						"type": "boolean"
					},
					"homeroom_course": {
						"type": "boolean"
					},
					"course_color": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"friendly_name": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"apply_assignment_group_weights": {
						"type": "boolean"
					},
					"calendar": {
						"$ref": "#/components/schemas/Calendar"
					},
					"time_zone": {
						"type": "string"
					},
					"blueprint": {
						"type": "boolean"
					},
					"template": {
						"type": "boolean"
					},
					"sis_course_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"integration_id": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"enrollments": {
						"items": {
							"$ref": "#/components/schemas/Enrollment"
						},
						"type": "array"
					},
					"hide_final_grades": {
						"type": "boolean"
					},
					"workflow_state": {
						"type": "string"
					},
					"restrict_enrollments_to_course_dates": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"name",
					"account_id",
					"uuid",
					"start_at",
					"grading_standard_id",
					"is_public",
					"created_at",
					"course_code",
					"default_view",
					"root_account_id",
					"enrollment_term_id",
					"license",
					"grade_passback_setting",
					"end_at",
					"public_syllabus",
					"public_syllabus_to_auth",
					"storage_quota_mb",
					"is_public_to_auth_users",
					"homeroom_course",
					"course_color",
					"friendly_name",
					"apply_assignment_group_weights",
					"calendar",
					"time_zone",
					"blueprint",
					"template",
					"sis_course_id",
					"integration_id",
					"enrollments",
					"hide_final_grades",
					"workflow_state",
					"restrict_enrollments_to_course_dates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FileListing": {
				"properties": {
					"sha": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"path": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"sha",
					"size",
					"path",
					"name"
				],
				"type": "object"
			},
			"MediaPlacement": {
				"description": "<p>A set of endpoints used by clients to connect to the media service group for an Amazon Chime SDK meeting.</p>",
				"properties": {
					"AudioHostUrl": {
						"type": "string",
						"description": "<p>The audio host URL.</p>"
					},
					"AudioFallbackUrl": {
						"type": "string",
						"description": "<p>The audio fallback URL.</p>"
					},
					"SignalingUrl": {
						"type": "string",
						"description": "<p>The signaling URL.</p>"
					},
					"TurnControlUrl": {
						"type": "string",
						"description": "<p>The turn control URL.</p>\n         <important>\n            <p>\n               <b>This parameter is deprecated and no longer used by the Amazon Chime SDK.</b>\n            </p>\n         </important>"
					},
					"ScreenDataUrl": {
						"type": "string",
						"description": "<p>The screen data URL.</p>\n         <important>\n            <p>\n               <b>This parameter is deprecated and no longer used by the Amazon Chime SDK.</b>\n            </p>\n         </important>"
					},
					"ScreenViewingUrl": {
						"type": "string",
						"description": "<p>The screen viewing URL.</p>\n         <important>\n            <p>\n               <b>This parameter is deprecated and no longer used by the Amazon Chime SDK.</b>\n            </p>\n         </important>"
					},
					"ScreenSharingUrl": {
						"type": "string",
						"description": "<p>The screen sharing URL.</p>\n         <important>\n            <p>\n               <b>This parameter is deprecated and no longer used by the Amazon Chime SDK.</b>\n            </p>\n         </important>"
					},
					"EventIngestionUrl": {
						"type": "string",
						"description": "<p>The event ingestion URL.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MeetingFeatureStatus": {
				"type": "string",
				"enum": [
					"AVAILABLE",
					"UNAVAILABLE"
				]
			},
			"AudioFeatures": {
				"description": "<p>An optional category of meeting features that contains audio-specific configurations, such as operating parameters for Amazon Voice Focus. </p>",
				"properties": {
					"EchoReduction": {
						"$ref": "#/components/schemas/MeetingFeatureStatus",
						"description": "<p>Makes echo reduction available to clients who connect to the meeting.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"VideoResolution": {
				"type": "string",
				"enum": [
					"FHD",
					"HD",
					"None"
				]
			},
			"VideoFeatures": {
				"description": "<p>The video features set for the meeting. Applies to all attendees.</p>\n         <note>\n            <p>If you specify <code>MeetingFeatures:Video:MaxResolution:None</code> when you create a meeting, all API requests\n                that include <code>SendReceive</code>, <code>Send</code>, or <code>Receive</code> for <code>AttendeeCapabilities:Video</code> will be rejected with <code>ValidationError 400</code>.</p>\n         </note>",
				"properties": {
					"MaxResolution": {
						"$ref": "#/components/schemas/VideoResolution",
						"description": "<p>The maximum video resolution for the meeting. Applies to all attendees.</p>\n         <note>\n            <p>Defaults to <code>HD</code>. To use <code>FHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code> value and override the default size\n            limit of 250 attendees.</p>\n         </note>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ContentResolution": {
				"type": "string",
				"enum": [
					"FHD",
					"None",
					"UHD"
				]
			},
			"ContentFeatures": {
				"description": "<p>Lists the content (screen share) features for the meeting. Applies to all attendees.</p>\n         <note>\n            <p>If you specify <code>MeetingFeatures:Content:MaxResolution:None</code> when you create a meeting, all API requests that include <code>SendReceive</code>, <code>Send</code>, or\n                <code>Receive</code> for <code>AttendeeCapabilities:Content</code> will be rejected with <code>ValidationError 400</code>.</p>\n         </note>",
				"properties": {
					"MaxResolution": {
						"$ref": "#/components/schemas/ContentResolution",
						"description": "<p>The maximum resolution for the meeting content.</p>\n         <note>\n            <p>Defaults to <code>FHD</code>. To use <code>UHD</code>, you must also provide a <code>MeetingFeatures:Attendee:MaxCount</code>\n         value and override the default size limit of 250 attendees.</p>\n         </note>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AttendeeFeatures": {
				"description": "<p>Lists the maximum number of attendees allowed into the meeting.</p>\n         <note>\n            <p>If you specify <code>FHD</code> for <code>MeetingFeatures:Video:MaxResolution</code>, or if you specify\n           <code>UHD</code> for <code>MeetingFeatures:Content:MaxResolution</code>, the maximum number of attendees changes from the default of <code>250</code> to <code>25</code>.</p>\n         </note>",
				"properties": {
					"MaxCount": {
						"type": "number",
						"format": "double",
						"description": "<p>The maximum number of attendees allowed into the meeting.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MeetingFeaturesConfiguration": {
				"description": "<p>The configuration settings of the features available to a meeting.</p>",
				"properties": {
					"Audio": {
						"$ref": "#/components/schemas/AudioFeatures",
						"description": "<p>The configuration settings for the audio features available to a meeting.</p>"
					},
					"Video": {
						"$ref": "#/components/schemas/VideoFeatures",
						"description": "<p>The configuration settings for the video features available to a meeting.</p>"
					},
					"Content": {
						"$ref": "#/components/schemas/ContentFeatures",
						"description": "<p>The configuration settings for the content features available to a meeting.</p>"
					},
					"Attendee": {
						"$ref": "#/components/schemas/AttendeeFeatures",
						"description": "<p>The configuration settings for the attendee features available to a meeting.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Meeting": {
				"description": "<p>A meeting created using the Amazon Chime SDK.</p>",
				"properties": {
					"MeetingId": {
						"type": "string",
						"description": "<p>The Amazon Chime SDK meeting ID.</p>"
					},
					"MeetingHostId": {
						"type": "string",
						"description": "<p>Reserved.</p>"
					},
					"ExternalMeetingId": {
						"type": "string",
						"description": "<p>The external meeting ID.</p>\n         <p>Pattern: <code>[-_&@+=,()\\{\\}\\[\\]\\/«».:|'\"#a-zA-Z0-9À-ÿ\\s]*</code>\n         </p>\n         <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix.\n            Case insensitive.</p>"
					},
					"MediaRegion": {
						"type": "string",
						"description": "<p>The Region in which you create the meeting. Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>,\n            <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>,\n            <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>,\n            <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>,\n            <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>,\n            <code>us-west-1</code>, <code>us-west-2</code>.</p>\n         <p>Available values in Amazon Web Services GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>"
					},
					"MediaPlacement": {
						"$ref": "#/components/schemas/MediaPlacement",
						"description": "<p>The media placement for the meeting.</p>"
					},
					"MeetingFeatures": {
						"$ref": "#/components/schemas/MeetingFeaturesConfiguration",
						"description": "<p>The features available to a meeting, such as echo reduction.</p>"
					},
					"PrimaryMeetingId": {
						"type": "string",
						"description": "<p>When specified, replicates the media from the primary meeting to this meeting.</p>"
					},
					"TenantIds": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "<p>Array of strings.</p>"
					},
					"MeetingArn": {
						"type": "string",
						"description": "<p>The ARN of the meeting.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ResponseMetadata": {
				"properties": {
					"httpStatusCode": {
						"type": "number",
						"format": "double",
						"description": "The status code of the last HTTP response received for this operation."
					},
					"requestId": {
						"type": "string",
						"description": "A unique identifier for the last request sent for this operation. Often\nrequested by AWS service teams to aid in debugging."
					},
					"extendedRequestId": {
						"type": "string",
						"description": "A secondary identifier for the last request sent. Used for debugging."
					},
					"cfId": {
						"type": "string",
						"description": "A tertiary identifier for the last request sent. Used for debugging."
					},
					"attempts": {
						"type": "number",
						"format": "double",
						"description": "The number of times this operation was attempted."
					},
					"totalRetryDelay": {
						"type": "number",
						"format": "double",
						"description": "The total amount of time (in milliseconds) that was spent waiting between\nretry attempts."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateMeetingCommandOutput": {
				"properties": {
					"Meeting": {
						"$ref": "#/components/schemas/Meeting",
						"description": "<p>The meeting information, including the meeting ID and\n           <code>MediaPlacement</code>.</p>"
					},
					"$metadata": {
						"$ref": "#/components/schemas/ResponseMetadata",
						"description": "Metadata pertaining to this request."
					}
				},
				"required": [
					"$metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MediaCapabilities": {
				"type": "string",
				"enum": [
					"None",
					"Receive",
					"Send",
					"SendReceive"
				]
			},
			"AttendeeCapabilities": {
				"description": "<p>The media capabilities of an attendee: audio, video, or content.</p>\n         <note>\n            <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information, refer to\n             and .</p>\n         </note>\n         <p>When using capabilities, be aware of these corner cases:</p>\n         <ul>\n            <li>\n               <p>If you specify <code>MeetingFeatures:Video:MaxResolution:None</code> when you create a meeting, all API requests\n                    that include <code>SendReceive</code>, <code>Send</code>, or <code>Receive</code> for <code>AttendeeCapabilities:Video</code> will be rejected with <code>ValidationError 400</code>.</p>\n            </li>\n            <li>\n               <p>If you specify <code>MeetingFeatures:Content:MaxResolution:None</code> when you create a meeting, all API requests that include <code>SendReceive</code>, <code>Send</code>, or\n                    <code>Receive</code> for <code>AttendeeCapabilities:Content</code> will be rejected with <code>ValidationError 400</code>.</p>\n            </li>\n            <li>\n               <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code>\n                    or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your\n                    <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p>\n            </li>\n            <li>\n               <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> ,\n                    and an attendee unmutes their microphone, audio flows from the attendee to the other meeting participants.</p>\n            </li>\n            <li>\n               <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> ,\n                    and the attendee turns on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p>\n            </li>\n         </ul>",
				"properties": {
					"Audio": {
						"$ref": "#/components/schemas/MediaCapabilities",
						"description": "<p>The audio capability assigned to an attendee.</p>"
					},
					"Video": {
						"$ref": "#/components/schemas/MediaCapabilities",
						"description": "<p>The video capability assigned to an attendee.</p>"
					},
					"Content": {
						"$ref": "#/components/schemas/MediaCapabilities",
						"description": "<p>The content capability assigned to an attendee.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Attendee": {
				"description": "<p>An Amazon Chime SDK meeting attendee. Includes a unique\n           <code>AttendeeId</code> and <code>JoinToken</code>. The\n           <code>JoinToken</code>\n           allows a client to authenticate and join as the specified attendee. The\n           <code>JoinToken</code>\n           expires when the meeting ends, or when\n           <a>DeleteAttendee</a>\n           is called. After that, the attendee is unable to join the meeting.\n       </p>\n         <p>We recommend securely transferring each <code>JoinToken</code> from your server application\n           to the client so that no other client has access to the token except for the one\n           authorized to represent the attendee.</p>",
				"properties": {
					"ExternalUserId": {
						"type": "string",
						"description": "<p>The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.</p>\n         <p>Pattern: <code>[-_&@+=,()\\{\\}\\[\\]\\/«».:|'\"#a-zA-Z0-9À-ÿ\\s]*</code>\n         </p>\n         <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix.\n            Case insensitive.</p>"
					},
					"AttendeeId": {
						"type": "string",
						"description": "<p>The Amazon Chime SDK attendee ID.</p>"
					},
					"JoinToken": {
						"type": "string",
						"description": "<p>The join token used by the Amazon Chime SDK attendee.</p>"
					},
					"Capabilities": {
						"$ref": "#/components/schemas/AttendeeCapabilities",
						"description": "<p>The capabilities assigned to an attendee: audio, video, or content.</p>\n         <note>\n            <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see\n            .</p>\n         </note>\n         <p>When using capabilities, be aware of these corner cases:</p>\n         <ul>\n            <li>\n               <p>If you specify <code>MeetingFeatures:Video:MaxResolution:None</code> when you create a meeting, all API requests\n                    that include <code>SendReceive</code>, <code>Send</code>, or <code>Receive</code> for <code>AttendeeCapabilities:Video</code> will be rejected with <code>ValidationError 400</code>.</p>\n            </li>\n            <li>\n               <p>If you specify <code>MeetingFeatures:Content:MaxResolution:None</code> when you create a meeting, all API requests that include <code>SendReceive</code>, <code>Send</code>, or\n                    <code>Receive</code> for <code>AttendeeCapabilities:Content</code> will be rejected with <code>ValidationError 400</code>.</p>\n            </li>\n            <li>\n               <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code>\n                    or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability\n                    to receive and you set your <code>content</code> capability to not receive.</p>\n            </li>\n            <li>\n               <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> ,\n                    and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p>\n            </li>\n            <li>\n               <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> ,\n                    and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p>\n            </li>\n         </ul>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateAttendeeCommandOutput": {
				"properties": {
					"Attendee": {
						"$ref": "#/components/schemas/Attendee",
						"description": "<p>The attendee information, including attendee ID and join token.</p>"
					},
					"$metadata": {
						"$ref": "#/components/schemas/ResponseMetadata",
						"description": "Metadata pertaining to this request."
					}
				},
				"required": [
					"$metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JoinMeetingResponse": {
				"properties": {
					"Attendee": {
						"$ref": "#/components/schemas/CreateAttendeeCommandOutput"
					},
					"Meeting": {
						"$ref": "#/components/schemas/CreateMeetingCommandOutput"
					}
				},
				"required": [
					"Attendee",
					"Meeting"
				],
				"type": "object"
			}
		},
		"securitySchemes": {
			"supabase": {
				"type": "accessToken",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "@pawtograder/api",
		"version": "0.0.1",
		"description": "API Services for the Pawtograder CS CourseOps Platform",
		"license": {
			"name": "GPL-3.0-only"
		},
		"contact": {
			"name": "Jonathan Bell",
			"email": "jon@jonbell.net"
		}
	},
	"paths": {
		"/api/autograder/create-github-repos-for-student": {
			"post": {
				"operationId": "CreateGitHubReposForStudent",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										},
										"is_ok": {
											"type": "boolean"
										}
									},
									"required": [
										"message",
										"is_ok"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"student"
						]
					}
				],
				"parameters": []
			}
		},
		"/api/autograder/regression-tests": {
			"get": {
				"operationId": "RetrieveAutograderRegressionTests",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"configs": {
											"items": {
												"properties": {
													"repo": {
														"type": "string"
													}
												},
												"required": [
													"repo"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"configs"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/autograder/submission": {
			"post": {
				"operationId": "CreateSubmission",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SubmissionResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid GitHub OIDC token"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "regression_test_repo",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/autograder/regression-test-run": {
			"post": {
				"operationId": "CreateRegressionTestRun",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RegressionTestRunResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid GitHub OIDC token"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "regression_test_repo",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/autograder/submission/feedback": {
			"post": {
				"operationId": "SubmitFeedback",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GradeResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid GitHub OIDC token"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GradingScriptResult"
							}
						}
					}
				}
			}
		},
		"/api/admin/canvas/courses": {
			"get": {
				"operationId": "GetCanvasCourses",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Course"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/api/admin/canvas/courses/{courseId}": {
			"get": {
				"operationId": "GetCanvasCourse",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Course"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/assignment/{assignmentId}/repositories": {
			"post": {
				"operationId": "CreateAssignmentRepositories",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "assignmentId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/enrollments": {
			"post": {
				"operationId": "SyncEnrollments",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/template-repos": {
			"get": {
				"operationId": "GetTemplateRepos",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"security_and_analysis": {
												"properties": {
													"secret_scanning_ai_detection": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"secret_scanning_non_provider_patterns": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"secret_scanning_push_protection": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"secret_scanning": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"dependabot_security_updates": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"advanced_security": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"web_commit_signoff_required": {
												"type": "boolean"
											},
											"allow_forking": {
												"type": "boolean"
											},
											"watchers": {
												"type": "number",
												"format": "double"
											},
											"open_issues": {
												"type": "number",
												"format": "double"
											},
											"forks": {
												"type": "number",
												"format": "double"
											},
											"license": {
												"properties": {
													"node_id": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"spdx_id": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"key": {
														"type": "string"
													}
												},
												"type": "object"
											},
											"code_of_conduct": {
												"properties": {
													"html_url": {
														"type": "string"
													},
													"body": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"key": {
														"type": "string"
													}
												},
												"required": [
													"html_url",
													"url",
													"name",
													"key"
												],
												"type": "object"
											},
											"network_count": {
												"type": "number",
												"format": "double"
											},
											"subscribers_count": {
												"type": "number",
												"format": "double"
											},
											"delete_branch_on_merge": {
												"type": "boolean"
											},
											"temp_clone_token": {
												"type": "string"
											},
											"role_name": {
												"type": "string"
											},
											"permissions": {
												"properties": {
													"pull": {
														"type": "boolean"
													},
													"triage": {
														"type": "boolean"
													},
													"push": {
														"type": "boolean"
													},
													"maintain": {
														"type": "boolean"
													},
													"admin": {
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"updated_at": {
												"type": "string"
											},
											"created_at": {
												"type": "string"
											},
											"pushed_at": {
												"type": "string"
											},
											"visibility": {
												"type": "string"
											},
											"disabled": {
												"type": "boolean"
											},
											"archived": {
												"type": "boolean"
											},
											"has_discussions": {
												"type": "boolean"
											},
											"has_downloads": {
												"type": "boolean"
											},
											"has_pages": {
												"type": "boolean"
											},
											"has_wiki": {
												"type": "boolean"
											},
											"has_projects": {
												"type": "boolean"
											},
											"has_issues": {
												"type": "boolean"
											},
											"topics": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"is_template": {
												"type": "boolean"
											},
											"open_issues_count": {
												"type": "number",
												"format": "double"
											},
											"default_branch": {
												"type": "string"
											},
											"size": {
												"type": "number",
												"format": "double"
											},
											"watchers_count": {
												"type": "number",
												"format": "double"
											},
											"stargazers_count": {
												"type": "number",
												"format": "double"
											},
											"forks_count": {
												"type": "number",
												"format": "double"
											},
											"language": {
												"type": "string"
											},
											"homepage": {
												"type": "string"
											},
											"svn_url": {
												"type": "string"
											},
											"hooks_url": {
												"type": "string"
											},
											"mirror_url": {
												"type": "string"
											},
											"clone_url": {
												"type": "string"
											},
											"trees_url": {
												"type": "string"
											},
											"teams_url": {
												"type": "string"
											},
											"tags_url": {
												"type": "string"
											},
											"subscription_url": {
												"type": "string"
											},
											"subscribers_url": {
												"type": "string"
											},
											"statuses_url": {
												"type": "string"
											},
											"stargazers_url": {
												"type": "string"
											},
											"ssh_url": {
												"type": "string"
											},
											"releases_url": {
												"type": "string"
											},
											"pulls_url": {
												"type": "string"
											},
											"notifications_url": {
												"type": "string"
											},
											"milestones_url": {
												"type": "string"
											},
											"merges_url": {
												"type": "string"
											},
											"languages_url": {
												"type": "string"
											},
											"labels_url": {
												"type": "string"
											},
											"keys_url": {
												"type": "string"
											},
											"issues_url": {
												"type": "string"
											},
											"issue_events_url": {
												"type": "string"
											},
											"issue_comment_url": {
												"type": "string"
											},
											"git_url": {
												"type": "string"
											},
											"git_tags_url": {
												"type": "string"
											},
											"git_refs_url": {
												"type": "string"
											},
											"git_commits_url": {
												"type": "string"
											},
											"forks_url": {
												"type": "string"
											},
											"events_url": {
												"type": "string"
											},
											"downloads_url": {
												"type": "string"
											},
											"deployments_url": {
												"type": "string"
											},
											"contributors_url": {
												"type": "string"
											},
											"contents_url": {
												"type": "string"
											},
											"compare_url": {
												"type": "string"
											},
											"commits_url": {
												"type": "string"
											},
											"comments_url": {
												"type": "string"
											},
											"collaborators_url": {
												"type": "string"
											},
											"branches_url": {
												"type": "string"
											},
											"blobs_url": {
												"type": "string"
											},
											"assignees_url": {
												"type": "string"
											},
											"archive_url": {
												"type": "string"
											},
											"url": {
												"type": "string"
											},
											"fork": {
												"type": "boolean"
											},
											"description": {
												"type": "string"
											},
											"html_url": {
												"type": "string"
											},
											"private": {
												"type": "boolean"
											},
											"owner": {
												"properties": {
													"user_view_type": {
														"type": "string"
													},
													"starred_at": {
														"type": "string"
													},
													"site_admin": {
														"type": "boolean"
													},
													"type": {
														"type": "string"
													},
													"received_events_url": {
														"type": "string"
													},
													"events_url": {
														"type": "string"
													},
													"repos_url": {
														"type": "string"
													},
													"organizations_url": {
														"type": "string"
													},
													"subscriptions_url": {
														"type": "string"
													},
													"starred_url": {
														"type": "string"
													},
													"gists_url": {
														"type": "string"
													},
													"following_url": {
														"type": "string"
													},
													"followers_url": {
														"type": "string"
													},
													"html_url": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"gravatar_id": {
														"type": "string"
													},
													"avatar_url": {
														"type": "string"
													},
													"node_id": {
														"type": "string"
													},
													"id": {
														"type": "number",
														"format": "double"
													},
													"login": {
														"type": "string"
													},
													"email": {
														"type": "string"
													},
													"name": {
														"type": "string"
													}
												},
												"required": [
													"site_admin",
													"type",
													"received_events_url",
													"events_url",
													"repos_url",
													"organizations_url",
													"subscriptions_url",
													"starred_url",
													"gists_url",
													"following_url",
													"followers_url",
													"html_url",
													"url",
													"gravatar_id",
													"avatar_url",
													"node_id",
													"id",
													"login"
												],
												"type": "object"
											},
											"full_name": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"node_id": {
												"type": "string"
											},
											"id": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"hooks_url",
											"trees_url",
											"teams_url",
											"tags_url",
											"subscription_url",
											"subscribers_url",
											"statuses_url",
											"stargazers_url",
											"releases_url",
											"pulls_url",
											"notifications_url",
											"milestones_url",
											"merges_url",
											"languages_url",
											"labels_url",
											"keys_url",
											"issues_url",
											"issue_events_url",
											"issue_comment_url",
											"git_tags_url",
											"git_refs_url",
											"git_commits_url",
											"forks_url",
											"events_url",
											"downloads_url",
											"deployments_url",
											"contributors_url",
											"contents_url",
											"compare_url",
											"commits_url",
											"comments_url",
											"collaborators_url",
											"branches_url",
											"blobs_url",
											"assignees_url",
											"archive_url",
											"url",
											"fork",
											"description",
											"html_url",
											"private",
											"owner",
											"full_name",
											"name",
											"node_id",
											"id"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/repos": {
			"get": {
				"operationId": "GetRepos",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"security_and_analysis": {
												"properties": {
													"secret_scanning_ai_detection": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"secret_scanning_non_provider_patterns": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"secret_scanning_push_protection": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"secret_scanning": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"dependabot_security_updates": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													},
													"advanced_security": {
														"properties": {
															"status": {
																"type": "string",
																"enum": [
																	"enabled",
																	"disabled"
																]
															}
														},
														"type": "object"
													}
												},
												"type": "object"
											},
											"web_commit_signoff_required": {
												"type": "boolean"
											},
											"allow_forking": {
												"type": "boolean"
											},
											"watchers": {
												"type": "number",
												"format": "double"
											},
											"open_issues": {
												"type": "number",
												"format": "double"
											},
											"forks": {
												"type": "number",
												"format": "double"
											},
											"license": {
												"properties": {
													"node_id": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"spdx_id": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"key": {
														"type": "string"
													}
												},
												"type": "object"
											},
											"code_of_conduct": {
												"properties": {
													"html_url": {
														"type": "string"
													},
													"body": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"key": {
														"type": "string"
													}
												},
												"required": [
													"html_url",
													"url",
													"name",
													"key"
												],
												"type": "object"
											},
											"network_count": {
												"type": "number",
												"format": "double"
											},
											"subscribers_count": {
												"type": "number",
												"format": "double"
											},
											"delete_branch_on_merge": {
												"type": "boolean"
											},
											"temp_clone_token": {
												"type": "string"
											},
											"role_name": {
												"type": "string"
											},
											"permissions": {
												"properties": {
													"pull": {
														"type": "boolean"
													},
													"triage": {
														"type": "boolean"
													},
													"push": {
														"type": "boolean"
													},
													"maintain": {
														"type": "boolean"
													},
													"admin": {
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"updated_at": {
												"type": "string"
											},
											"created_at": {
												"type": "string"
											},
											"pushed_at": {
												"type": "string"
											},
											"visibility": {
												"type": "string"
											},
											"disabled": {
												"type": "boolean"
											},
											"archived": {
												"type": "boolean"
											},
											"has_discussions": {
												"type": "boolean"
											},
											"has_downloads": {
												"type": "boolean"
											},
											"has_pages": {
												"type": "boolean"
											},
											"has_wiki": {
												"type": "boolean"
											},
											"has_projects": {
												"type": "boolean"
											},
											"has_issues": {
												"type": "boolean"
											},
											"topics": {
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"is_template": {
												"type": "boolean"
											},
											"open_issues_count": {
												"type": "number",
												"format": "double"
											},
											"default_branch": {
												"type": "string"
											},
											"size": {
												"type": "number",
												"format": "double"
											},
											"watchers_count": {
												"type": "number",
												"format": "double"
											},
											"stargazers_count": {
												"type": "number",
												"format": "double"
											},
											"forks_count": {
												"type": "number",
												"format": "double"
											},
											"language": {
												"type": "string"
											},
											"homepage": {
												"type": "string"
											},
											"svn_url": {
												"type": "string"
											},
											"hooks_url": {
												"type": "string"
											},
											"mirror_url": {
												"type": "string"
											},
											"clone_url": {
												"type": "string"
											},
											"trees_url": {
												"type": "string"
											},
											"teams_url": {
												"type": "string"
											},
											"tags_url": {
												"type": "string"
											},
											"subscription_url": {
												"type": "string"
											},
											"subscribers_url": {
												"type": "string"
											},
											"statuses_url": {
												"type": "string"
											},
											"stargazers_url": {
												"type": "string"
											},
											"ssh_url": {
												"type": "string"
											},
											"releases_url": {
												"type": "string"
											},
											"pulls_url": {
												"type": "string"
											},
											"notifications_url": {
												"type": "string"
											},
											"milestones_url": {
												"type": "string"
											},
											"merges_url": {
												"type": "string"
											},
											"languages_url": {
												"type": "string"
											},
											"labels_url": {
												"type": "string"
											},
											"keys_url": {
												"type": "string"
											},
											"issues_url": {
												"type": "string"
											},
											"issue_events_url": {
												"type": "string"
											},
											"issue_comment_url": {
												"type": "string"
											},
											"git_url": {
												"type": "string"
											},
											"git_tags_url": {
												"type": "string"
											},
											"git_refs_url": {
												"type": "string"
											},
											"git_commits_url": {
												"type": "string"
											},
											"forks_url": {
												"type": "string"
											},
											"events_url": {
												"type": "string"
											},
											"downloads_url": {
												"type": "string"
											},
											"deployments_url": {
												"type": "string"
											},
											"contributors_url": {
												"type": "string"
											},
											"contents_url": {
												"type": "string"
											},
											"compare_url": {
												"type": "string"
											},
											"commits_url": {
												"type": "string"
											},
											"comments_url": {
												"type": "string"
											},
											"collaborators_url": {
												"type": "string"
											},
											"branches_url": {
												"type": "string"
											},
											"blobs_url": {
												"type": "string"
											},
											"assignees_url": {
												"type": "string"
											},
											"archive_url": {
												"type": "string"
											},
											"url": {
												"type": "string"
											},
											"fork": {
												"type": "boolean"
											},
											"description": {
												"type": "string"
											},
											"html_url": {
												"type": "string"
											},
											"private": {
												"type": "boolean"
											},
											"owner": {
												"properties": {
													"user_view_type": {
														"type": "string"
													},
													"starred_at": {
														"type": "string"
													},
													"site_admin": {
														"type": "boolean"
													},
													"type": {
														"type": "string"
													},
													"received_events_url": {
														"type": "string"
													},
													"events_url": {
														"type": "string"
													},
													"repos_url": {
														"type": "string"
													},
													"organizations_url": {
														"type": "string"
													},
													"subscriptions_url": {
														"type": "string"
													},
													"starred_url": {
														"type": "string"
													},
													"gists_url": {
														"type": "string"
													},
													"following_url": {
														"type": "string"
													},
													"followers_url": {
														"type": "string"
													},
													"html_url": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"gravatar_id": {
														"type": "string"
													},
													"avatar_url": {
														"type": "string"
													},
													"node_id": {
														"type": "string"
													},
													"id": {
														"type": "number",
														"format": "double"
													},
													"login": {
														"type": "string"
													},
													"email": {
														"type": "string"
													},
													"name": {
														"type": "string"
													}
												},
												"required": [
													"site_admin",
													"type",
													"received_events_url",
													"events_url",
													"repos_url",
													"organizations_url",
													"subscriptions_url",
													"starred_url",
													"gists_url",
													"following_url",
													"followers_url",
													"html_url",
													"url",
													"gravatar_id",
													"avatar_url",
													"node_id",
													"id",
													"login"
												],
												"type": "object"
											},
											"full_name": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"node_id": {
												"type": "string"
											},
											"id": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"hooks_url",
											"trees_url",
											"teams_url",
											"tags_url",
											"subscription_url",
											"subscribers_url",
											"statuses_url",
											"stargazers_url",
											"releases_url",
											"pulls_url",
											"notifications_url",
											"milestones_url",
											"merges_url",
											"languages_url",
											"labels_url",
											"keys_url",
											"issues_url",
											"issue_events_url",
											"issue_comment_url",
											"git_tags_url",
											"git_refs_url",
											"git_commits_url",
											"forks_url",
											"events_url",
											"downloads_url",
											"deployments_url",
											"contributors_url",
											"contents_url",
											"compare_url",
											"commits_url",
											"comments_url",
											"collaborators_url",
											"branches_url",
											"blobs_url",
											"assignees_url",
											"archive_url",
											"url",
											"fork",
											"description",
											"html_url",
											"private",
											"owner",
											"full_name",
											"name",
											"node_id",
											"id"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/repos/{orgName}/{repoName}/files": {
			"get": {
				"operationId": "ListFilesInRepo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/FileListing"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "orgName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "repoName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/repos/{orgName}/{repoName}/files/{path}": {
			"get": {
				"operationId": "GetFileFromRepo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"items": {
												"properties": {
													"_links": {
														"properties": {
															"self": {
																"type": "string"
															},
															"html": {
																"type": "string"
															},
															"git": {
																"type": "string"
															}
														},
														"required": [
															"self",
															"html",
															"git"
														],
														"type": "object"
													},
													"download_url": {
														"type": "string"
													},
													"html_url": {
														"type": "string"
													},
													"git_url": {
														"type": "string"
													},
													"url": {
														"type": "string"
													},
													"sha": {
														"type": "string"
													},
													"content": {
														"type": "string"
													},
													"path": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"size": {
														"type": "number",
														"format": "double"
													},
													"type": {
														"type": "string",
														"enum": [
															"dir",
															"file",
															"submodule",
															"symlink"
														]
													}
												},
												"required": [
													"_links",
													"download_url",
													"html_url",
													"git_url",
													"url",
													"sha",
													"path",
													"name",
													"size",
													"type"
												],
												"type": "object"
											},
											"type": "array"
										},
										{
											"properties": {
												"submodule_git_url": {
													"type": "string"
												},
												"target": {
													"type": "string"
												},
												"_links": {
													"properties": {
														"self": {
															"type": "string"
														},
														"html": {
															"type": "string"
														},
														"git": {
															"type": "string"
														}
													},
													"required": [
														"self",
														"html",
														"git"
													],
													"type": "object"
												},
												"download_url": {
													"type": "string"
												},
												"html_url": {
													"type": "string"
												},
												"git_url": {
													"type": "string"
												},
												"url": {
													"type": "string"
												},
												"sha": {
													"type": "string"
												},
												"content": {
													"type": "string"
												},
												"path": {
													"type": "string"
												},
												"name": {
													"type": "string"
												},
												"size": {
													"type": "number",
													"format": "double"
												},
												"encoding": {
													"type": "string"
												},
												"type": {
													"type": "string",
													"enum": [
														"file"
													],
													"nullable": false
												}
											},
											"required": [
												"_links",
												"download_url",
												"html_url",
												"git_url",
												"url",
												"sha",
												"content",
												"path",
												"name",
												"size",
												"encoding",
												"type"
											],
											"type": "object"
										},
										{
											"properties": {
												"_links": {
													"properties": {
														"self": {
															"type": "string"
														},
														"html": {
															"type": "string"
														},
														"git": {
															"type": "string"
														}
													},
													"required": [
														"self",
														"html",
														"git"
													],
													"type": "object"
												},
												"download_url": {
													"type": "string"
												},
												"html_url": {
													"type": "string"
												},
												"git_url": {
													"type": "string"
												},
												"url": {
													"type": "string"
												},
												"sha": {
													"type": "string"
												},
												"path": {
													"type": "string"
												},
												"name": {
													"type": "string"
												},
												"size": {
													"type": "number",
													"format": "double"
												},
												"target": {
													"type": "string"
												},
												"type": {
													"type": "string",
													"enum": [
														"symlink"
													],
													"nullable": false
												}
											},
											"required": [
												"_links",
												"download_url",
												"html_url",
												"git_url",
												"url",
												"sha",
												"path",
												"name",
												"size",
												"target",
												"type"
											],
											"type": "object"
										},
										{
											"properties": {
												"_links": {
													"properties": {
														"self": {
															"type": "string"
														},
														"html": {
															"type": "string"
														},
														"git": {
															"type": "string"
														}
													},
													"required": [
														"self",
														"html",
														"git"
													],
													"type": "object"
												},
												"download_url": {
													"type": "string"
												},
												"html_url": {
													"type": "string"
												},
												"git_url": {
													"type": "string"
												},
												"url": {
													"type": "string"
												},
												"sha": {
													"type": "string"
												},
												"path": {
													"type": "string"
												},
												"name": {
													"type": "string"
												},
												"size": {
													"type": "number",
													"format": "double"
												},
												"submodule_git_url": {
													"type": "string"
												},
												"type": {
													"type": "string",
													"enum": [
														"submodule"
													],
													"nullable": false
												}
											},
											"required": [
												"_links",
												"download_url",
												"html_url",
												"git_url",
												"url",
												"sha",
												"path",
												"name",
												"size",
												"submodule_git_url",
												"type"
											],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "orgName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "repoName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/instructor/{courseId}/autograder/{assignmentId}/{studentId}": {
			"post": {
				"operationId": "TestSolutionWorkflow",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"supabase": [
							"instructor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "assignmentId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "path",
						"name": "studentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/admin/course/{courseId}": {
			"post": {
				"operationId": "CreateCourseForCanvasCourse",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"supabase": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "courseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/help-queue/help-request/{requestId}": {
			"get": {
				"operationId": "GetMeeting",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JoinMeetingResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"supabase": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "requestId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}